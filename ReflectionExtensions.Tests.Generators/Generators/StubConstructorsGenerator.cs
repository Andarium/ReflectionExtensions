namespace ReflectionExtensions.Tests.Generators;

public sealed class StubConstructorsGenerator(bool isPublic) : GeneratorBase
{
    protected override string TypeName => isPublic ? "StubPublicConstructors" : "StubPrivateConstructors";

    protected override void GenerateInternal()
    {
        AppendLine("// <auto-generated/>");
        AppendLine("using System;");
        AppendLine();
        AppendLine("namespace ReflectionExtensions.Tests;");
        AppendLine();
        AppendLine($"public sealed class {TypeName}");
        AppendLine("{");

        AppendOffsetLine("public object Result;");
        AppendLine();

        GenerateConstructors<int>(5, false);
        AppendLine();
        GenerateConstructors<string>(5, true);

        Append("}");
    }

    private void GenerateConstructors<T>(int upToArgs, bool skipFirst)
    {
        var start = skipFirst ? 1 : 0;
        for (var args = start; args <= upToArgs; args++)
        {
            GenerateSumFunction<T>(args);

            if (args < upToArgs)
            {
                AppendLine();
            }
        }
    }

    private void GenerateSumFunction<T>(int args)
    {
        var pTypeName = typeof(T).Name;

        AppendOffset(isPublic ? "public " : "private ");
        Append(TypeName);
        Append('(');

        AppendSequence(args, i => $"{pTypeName} arg{i}", AppendType.Comma);
        AppendLine(")");
        AppendOffsetLine("{");
        AppendOffset2("Result = ");
        AppendNewArray<T>(args, i => $"arg{i}");
        AppendLine(';');
        AppendOffsetLine("}");
    }
}