namespace ReflectionExtensions.Tests.Generators;

public sealed class StubMethodsGenerator(string typeName, bool generateProcedures) : GeneratorBase
{
    protected override string TypeName => typeName;

    protected override void GenerateInternal()
    {
        AppendLine("// <auto-generated/>");
        AppendLine("using System;");
        AppendLine();
        AppendLine("namespace ReflectionExtensions.Tests;");
        AppendLine();
        AppendLine($"public sealed class {typeName}");
        AppendLine("{");

        if (generateProcedures)
        {
            Append(Offset);
            AppendLine("public static object Result;");
            AppendLine();
        }

        GenerateSumFunctions<int>(5, true, false);
        AppendLine();
        GenerateSumFunctions<int>(5, false, false);
        AppendLine();
        GenerateSumFunctions<int>(5, true, true);
        AppendLine();
        GenerateSumFunctions<int>(5, false, true);
        AppendLine();
        
        GenerateSumFunctions<string>(5, true, false);
        AppendLine();
        GenerateSumFunctions<string>(5, false, false);
        AppendLine();
        GenerateSumFunctions<string>(5, true, true);
        AppendLine();
        GenerateSumFunctions<string>(5, false, true);

        Append("}");
    }

    private void GenerateSumFunctions<T>(int upToArgs, bool isPublic, bool isStatic)
    {
        for (var args = 0; args <= upToArgs; args++)
        {
            GenerateSumFunction<T>(args, isPublic, isStatic);

            if (args < upToArgs)
            {
                AppendLine();
            }
        }
    }

    private void GenerateSumFunction<T>(int args, bool isPublic, bool isStatic)
    {
        var pTypeName = typeof(T).Name;

        Append(Offset);
        Append(isPublic ? "public " : "private ");
        Append(isStatic ? "static " : "");
        Append(generateProcedures ? "void" : pTypeName);
        Append(' ');
        Append(isPublic ? "Public_" : "Private_");
        Append(isStatic ? "Static_" : "Instance_");
        Append("Sum");
        Append(args);
        Append("_");
        Append(pTypeName);
        Append('(');

        for (var i = 0; i < args; i++)
        {
            Append(pTypeName);
            Append($" arg{i}");

            if (i < args - 1)
            {
                Append(", ");
            }
        }

        AppendLine(")");
        Append(Offset);
        AppendLine("{");
        Append(Offset);
        Append(Offset);

        Append(generateProcedures ? "Result = " : "return ");

        if (args is 0)
        {
            Append("default");
        }

        for (var i = 0; i < args; i++)
        {
            Append($"arg{i}");

            if (i < args - 1)
            {
                Append(" + ");
            }
        }

        Append(';');
        AppendLine();
        Append(Offset);
        AppendLine("}");
    }
}